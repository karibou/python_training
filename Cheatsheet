		Python Training
	   	  Cheatsheet

Reference à la documentation des modules hors interpreteur :

$ pydoc {module}

Les allocations se font TOUJOURS par référence :

list1 = [1,2,3]
list2 = list1
list2[0] = 4
list1 = [4,2,3]

sauf si on demande de copier les éléments spécifiquement avec l'opérateur tranche (:) :

list2 = list1[:]
list1[0] = 1
list2 = [4,2,3]
Trouver l'identifiant d'une variable:

Concaténation de liste :

list1 = [1, 2, 3]
list2 = list1
list1 = list1 + [4, 5, 6]
list2 sera [1, 2, 3]

list1 = [1, 2, 3]
list2 = list1
list1 += [4, 5, 6]
list2 sera [1, 2, 3, 4, 5, 6]

id(l)

Trouver les éléments d'une classe :
dir(Class)

xrange n'existe pas en P3. range() retourne un itérateur
list(range(3))

Long variables :

var = ('slidfjvklnfoirjlkn'
'soeiurdlxkflnvoxidhjr eo')
print var
'islidfjvklnfoirjlknsoeiurdlxkflnvoxidhjr eo'
Equivalent à l'utilisation du "\" à la fin de ligne

Datatypes:
Tuple : (,)
List : [,]
Dictionaire : {,}

Nombre d'arguments variables :

def add(*args):	#nombre d'arguments variable
 a = tuple contenant les valeurs arguments

def add(**kwargs): #nombre d'arguments variable
 = a dict contenant les arguments nommés

Programmation Objet:

Pour que la méthode super() fonctionne, il faut que la
classe soit définie en tant qu'object:

ex:
class MyClass(object):
    A=1

Introspection

pystartup:
==========
#!/usr/bin/env python
# Add auto-completion and a stored history file of commands to your Python
# interactive interpreter. Requires Python 2.0+, readline. Autocomplete is
# bound to the Esc key by default (you can change it - see readline docs).
#
# Store the file in ~/.pystartup, and set an environment variable to point
# to it, e.g. "export PYTHONSTARTUP=/max/home/itamar/.pystartup" in bash.
#
# Note that PYTHONSTARTUP does *not* expand "~", so you have to put in the
# full path to your home directory.

import rlcompleter
import readline
readline.parse_and_bind("tab: complete")

import os
histfile = os.path.join(os.environ["HOME"], ".pyhist")
try:
    readline.read_history_file(histfile)
except IOError:
    pass

import atexit
atexit.register(readline.write_history_file, histfile)

del os, histfile, atexit


## def autoload_exc(type, value, traceback):
##     modulename = value.args[0].split()[1][1:-1]
##     f_locals = traceback.tb_frame.f_locals
##     f_globals = traceback.tb_frame.f_globals
##     exec "import %s" % modulename in f_locals, f_globals
##     exec traceback.tb_frame.f_code in f_locals, f_globals
 
## import sys
## sys.excepthook = autoload_exc
## del sys, autoload_exc
